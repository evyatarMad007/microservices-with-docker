{"ast":null,"code":"const formValidationHandler = (inp, value) => {\n  // password validation: \n  // min-length: 8 characters.\n  // max-length: 20 characters.\n  // must contain at least: one lower case, one upper case, one number.\n  if (inp === 'password' || inp === 'confirmPassword') {\n    const regExpPassword = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n\n    if (regExpPassword.test(value) && value.length <= 20) {\n      return \"\";\n    } else {\n      return \"Password must be: 6-20, lower,upper case and number.\";\n    }\n  } // email validation: \n  // Must be an email format.\n\n\n  if (inp === 'email') {\n    const regExpEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (regExpEmail.test(value)) {\n      return \"\";\n    } else {\n      return \"Email is invalid: must contain an email format.\";\n    }\n  } // name validation: \n  // Must be letters only.\n  // min-length: 2 characters\n  // max-length: 20 characters\n\n\n  if (inp === 'firstName' || inp === 'lastName') {\n    const regExpName = /^[A-Za-z]+$/;\n\n    if (regExpName.test(value) && value.length >= 2 && value.length <= 20) {\n      return \"\";\n    } else {\n      return \"name must contain only letters, 2-20 length.\";\n    }\n  } // phone number validation: \n  // Must be an israeli phone format.\n\n\n  if (inp === 'phone') {\n    const regExpPhoneNumber = /^05\\d([-]{0,1})\\d{7}$/;\n\n    if (regExpPhoneNumber.test(value)) {\n      return \"\";\n    } else {\n      return \"Phone number is invalid\";\n    }\n  } // Adress validation: \n  // min-length: 2 characters.\n  // max-length: 35 characters.\n\n\n  if (inp === 'adress') {\n    if (value.length >= 2 && value.length <= 25) {\n      return \"\";\n    } else {\n      return \"Adress must contain min 2 max 35 characters\";\n    }\n  } // Roll validation: \n  // must be a value.\n\n\n  if (inp === 'roll') {\n    if (value.length > 0) {\n      return \"\";\n    } else {\n      return 'Roll is invalid';\n    }\n  }\n};\n\nexport { formValidationHandler };","map":{"version":3,"sources":["C:/GitHub/employee-managment-system/frontend/src/utils/validate.js"],"names":["formValidationHandler","inp","value","regExpPassword","test","length","regExpEmail","regExpName","regExpPhoneNumber"],"mappings":"AAAA,MAAMA,qBAAqB,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAE1C;AACA;AACA;AACA;AACA,MAAID,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,iBAAlC,EAAqD;AACjD,UAAME,cAAc,GAAG,iDAAvB;;AACA,QAAKA,cAAc,CAACC,IAAf,CAAoBF,KAApB,KAA8BA,KAAK,CAACG,MAAN,IAAgB,EAAnD,EAAuD;AACpD,aAAO,EAAP;AACF,KAFD,MAEO;AACJ,aAAO,sDAAP;AACF;AACJ,GAbyC,CAe1C;AACA;;;AACA,MAAIJ,GAAG,KAAK,OAAZ,EAAsB;AAClB,UAAMK,WAAW,GAAG,uJAApB;;AACA,QAAIA,WAAW,CAACF,IAAZ,CAAiBF,KAAjB,CAAJ,EAA8B;AAC1B,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,iDAAP;AACH;AACJ,GAxByC,CA0B1C;AACA;AACA;AACA;;;AACA,MAAID,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,UAAnC,EAAgD;AAC5C,UAAMM,UAAU,GAAG,aAAnB;;AACA,QAAIA,UAAU,CAACH,IAAX,CAAgBF,KAAhB,KAA0BA,KAAK,CAACG,MAAN,IAAgB,CAA1C,IAA+CH,KAAK,CAACG,MAAN,IAAgB,EAAnE,EAAwE;AACpE,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,8CAAP;AACH;AACJ,GArCyC,CAuC1C;AACA;;;AACA,MAAIJ,GAAG,KAAK,OAAZ,EAAsB;AAClB,UAAMO,iBAAiB,GAAG,uBAA1B;;AACA,QAAIA,iBAAiB,CAACJ,IAAlB,CAAuBF,KAAvB,CAAJ,EAAoC;AAChC,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,yBAAP;AACH;AACJ,GAhDyC,CAkD1C;AACA;AACA;;;AACA,MAAID,GAAG,KAAK,QAAZ,EAAuB;AACnB,QAAIC,KAAK,CAACG,MAAN,IAAgB,CAAhB,IAAqBH,KAAK,CAACG,MAAN,IAAgB,EAAzC,EAA8C;AAC1C,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,6CAAP;AACH;AACJ,GA3DyC,CA6D1C;AACA;;;AACA,MAAIJ,GAAG,KAAK,MAAZ,EAAqB;AACjB,QAAIC,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAuB;AACnB,aAAO,EAAP;AACH,KAFD,MAEO;AACH,aAAO,iBAAP;AACH;AACJ;AAGJ,CAxED;;AA0EA,SAASL,qBAAT","sourcesContent":["const formValidationHandler = (inp, value) => {\r\n    \r\n    // password validation: \r\n    // min-length: 8 characters.\r\n    // max-length: 20 characters.\r\n    // must contain at least: one lower case, one upper case, one number.\r\n    if( inp === 'password' || inp === 'confirmPassword') {\r\n        const regExpPassword = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n        if ( regExpPassword.test(value) && value.length <= 20 ){\r\n           return \"\"\r\n        } else {\r\n           return \"Password must be: 6-20, lower,upper case and number.\"\r\n        }\r\n    }\r\n\r\n    // email validation: \r\n    // Must be an email format.\r\n    if( inp === 'email' ) {\r\n        const regExpEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if( regExpEmail.test(value) ) {\r\n            return \"\"\r\n        } else {\r\n            return \"Email is invalid: must contain an email format.\"\r\n        }\r\n    }\r\n\r\n    // name validation: \r\n    // Must be letters only.\r\n    // min-length: 2 characters\r\n    // max-length: 20 characters\r\n    if( inp === 'firstName' || inp === 'lastName' ) {\r\n        const regExpName = /^[A-Za-z]+$/;\r\n        if( regExpName.test(value) && value.length >= 2 && value.length <= 20 ) {\r\n            return \"\"\r\n        } else {\r\n            return \"name must contain only letters, 2-20 length.\"\r\n        }\r\n    }\r\n\r\n    // phone number validation: \r\n    // Must be an israeli phone format.\r\n    if( inp === 'phone' ) {\r\n        const regExpPhoneNumber = /^05\\d([-]{0,1})\\d{7}$/;\r\n        if( regExpPhoneNumber.test(value) ) {\r\n            return \"\"\r\n        } else {\r\n            return \"Phone number is invalid\"\r\n        }\r\n    }\r\n\r\n    // Adress validation: \r\n    // min-length: 2 characters.\r\n    // max-length: 35 characters.\r\n    if( inp === 'adress' ) {\r\n        if( value.length >= 2 && value.length <= 25 ) {\r\n            return \"\"\r\n        } else {\r\n            return \"Adress must contain min 2 max 35 characters\"\r\n        }\r\n    }\r\n\r\n    // Roll validation: \r\n    // must be a value.\r\n    if( inp === 'roll' ) {\r\n        if( value.length > 0 ) {\r\n            return \"\"\r\n        } else {\r\n            return 'Roll is invalid'\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport { formValidationHandler };"]},"metadata":{},"sourceType":"module"}