{"ast":null,"code":"import axios from 'axios';\nimport { apiUrl, headers, tokenKey } from \"../config/config\";\nimport jwtDecode from \"jwt-decode\";\nimport { toast } from \"react-toastify\"; // Logout user.\n\nexport function logout() {\n  // remove token from Localstorage \n  localStorage.removeItem(tokenKey);\n} // check if token exist (in localStorage).\n\nexport function getCurrentUser() {\n  try {\n    // try to take the token from localStorage\n    const jwt = localStorage.getItem(tokenKey); // decode and return him\n\n    return jwtDecode(JSON.parse(jwt).token);\n  } catch (ex) {\n    // if not exist return null \n    return null;\n  }\n} // extract user data from localStorage.\n\nexport function userData() {\n  try {\n    // try to take the token from localStorage\n    const jwt = JSON.parse(localStorage.getItem(tokenKey)).token;\n    const data = jwtDecode(jwt).userData;\n    const user = {\n      _id: data._id,\n      firstName: data.firstName,\n      lastName: data.lastName,\n      email: data.email,\n      userImage: data.userImage,\n      isAdmin: data.isAdmin,\n      isEditor: data.isEditor\n    }; // return him\n\n    return user;\n  } catch (ex) {\n    // if not exist return null \n    return null;\n  }\n} // @desc    Register a new user\n// @route   [POST] /api/users/register\n// @access  Public\n// @payload user: { firstName, lastName, email, image, password }\n\nexport async function registerUser(user) {\n  if (!user.userImage) {\n    user.userImage = \"empty\";\n  }\n\n  try {\n    // send user data and get the response (user data + token).\n    const {\n      data\n    } = await axios.post(`${apiUrl}/api/users/register`, user); // set the token in local storage (connect the user)\n\n    localStorage.setItem(tokenKey, JSON.stringify(data)); // return user data outside\n\n    return data;\n  } catch (err) {\n    if (err.response) {\n      return err.response.data.message;\n    }\n  }\n} // @desc    Login - Auth user & get token.\n// @route   [POST] /api/users/login\n// @access  Public\n// @payload email, password\n\nexport async function loginUser(email, password) {\n  try {\n    // send email & password and get the response (user data + token).\n    const {\n      data\n    } = await axios.post(`${apiUrl}/api/users/login`, {\n      email,\n      password\n    }); // set the token in local storage (connect the user)\n\n    localStorage.setItem(tokenKey, JSON.stringify(data)); // return user data outside\n\n    return data;\n  } catch (err) {\n    if (err.response) {\n      return err.response.data.message;\n    }\n  }\n} // @desc    Get user profile\n// @route   [GET] /api/users/profile\n// @access  Private\n// @payload userId\n\nexport async function getUserProfile(userId) {\n  try {\n    // send id of the current user, and get all user in = data variable.\n    const {\n      data\n    } = await axios.post(`${apiUrl}/api/users/profile`, userId, {\n      headers\n    }); // return all data outside \n\n    return data;\n  } catch (err) {\n    if (err.response) {\n      return err.response.data.message;\n    }\n  }\n}\nconst userMethods = {\n  registerUser,\n  loginUser,\n  getUserProfile,\n  getCurrentUser,\n  logout\n};\nexport default userMethods;","map":{"version":3,"sources":["C:/GitHub/employee-managment-system/frontend/src/services/userService.js"],"names":["axios","apiUrl","headers","tokenKey","jwtDecode","toast","logout","localStorage","removeItem","getCurrentUser","jwt","getItem","JSON","parse","token","ex","userData","data","user","_id","firstName","lastName","email","userImage","isAdmin","isEditor","registerUser","post","setItem","stringify","err","response","message","loginUser","password","getUserProfile","userId","userMethods"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { apiUrl, headers, tokenKey } from \"../config/config\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n// Logout user.\r\nexport function logout() {\r\n    // remove token from Localstorage \r\n    localStorage.removeItem(tokenKey)\r\n}\r\n\r\n// check if token exist (in localStorage).\r\nexport function getCurrentUser() {\r\n    try {\r\n        // try to take the token from localStorage\r\n        const jwt = localStorage.getItem(tokenKey); \r\n        \r\n        // decode and return him\r\n        return jwtDecode(JSON.parse(jwt).token);\r\n\r\n    } catch(ex) {\r\n        // if not exist return null \r\n        return null\r\n    }\r\n}\r\n\r\n// extract user data from localStorage.\r\nexport function userData() {\r\n    try {\r\n        // try to take the token from localStorage\r\n        const jwt = JSON.parse(localStorage.getItem(tokenKey)).token; \r\n\r\n        const data = jwtDecode(jwt).userData;\r\n        \r\n        const user = {\r\n            _id: data._id,\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            email: data.email,\r\n            userImage: data.userImage,\r\n            isAdmin: data.isAdmin,\r\n            isEditor: data.isEditor\r\n        }\r\n\r\n        // return him\r\n        return user;\r\n\r\n    } catch(ex) {\r\n        // if not exist return null \r\n        return null\r\n    }\r\n}\r\n\r\n\r\n// @desc    Register a new user\r\n// @route   [POST] /api/users/register\r\n// @access  Public\r\n// @payload user: { firstName, lastName, email, image, password }\r\nexport async function registerUser(user){\r\n\r\n\r\n    if( ! user.userImage ) {\r\n        user.userImage = \"empty\"\r\n    }\r\n\r\n    try {\r\n\r\n        // send user data and get the response (user data + token).\r\n        const { data } = await axios.post(\r\n            `${apiUrl}/api/users/register`,\r\n            user,\r\n        )\r\n\r\n        // set the token in local storage (connect the user)\r\n        localStorage.setItem(tokenKey, JSON.stringify(data))\r\n\r\n\r\n        // return user data outside\r\n        return data;\r\n    }  catch (err) {\r\n        if( err.response ) {\r\n            return err.response.data.message\r\n        }\r\n    }\r\n}\r\n\r\n// @desc    Login - Auth user & get token.\r\n// @route   [POST] /api/users/login\r\n// @access  Public\r\n// @payload email, password\r\nexport async function loginUser(email, password){\r\n    \r\n    try {\r\n\r\n        // send email & password and get the response (user data + token).\r\n        const { data } = await axios.post(\r\n            `${apiUrl}/api/users/login`,\r\n             {email, password}\r\n        )\r\n\r\n        \r\n        // set the token in local storage (connect the user)\r\n        localStorage.setItem(tokenKey, JSON.stringify(data))\r\n\r\n\r\n        // return user data outside\r\n        return data;\r\n    }  catch (err) {\r\n        if( err.response ) {\r\n            return err.response.data.message\r\n        }\r\n    }\r\n}\r\n\r\n// @desc    Get user profile\r\n// @route   [GET] /api/users/profile\r\n// @access  Private\r\n// @payload userId\r\nexport async function getUserProfile(userId){\r\n    \r\n    try {\r\n\r\n        // send id of the current user, and get all user in = data variable.\r\n        const { data } = await axios.post(\r\n            `${apiUrl}/api/users/profile`,\r\n             userId,\r\n             {headers}\r\n        )\r\n  \r\n        \r\n        // return all data outside \r\n        return data\r\n\r\n    }  catch (err) {\r\n        if( err.response ) {\r\n            return err.response.data.message\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst userMethods = {\r\n    registerUser,\r\n    loginUser,\r\n    getUserProfile,\r\n    getCurrentUser,\r\n    logout,\r\n}\r\n\r\nexport default userMethods"]},"metadata":{},"sourceType":"module"}